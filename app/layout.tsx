// import type { Metadata } from "next";
// import { Inter } from "next/font/google";
// import "./globals.css";
// import ConvexClientProvider from "../providers/ConvexClientProvider";
// import {ClerkProvider} from "@clerk/nextjs"

// const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body className={inter.className}>
        
//           <ConvexClientProvider>
//             {children}
//           </ConvexClientProvider>
        
        
//       </body>
//     </html>
//   );
// }

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import ConvexClientProvider from "../providers/ConvexClientProvider";
import {
  ClerkProvider,
  SignInButton,
  SignedIn,
  SignedOut,
  UserButton,
} from "@clerk/nextjs";
import { User } from "@clerk/nextjs/server";
import { TooltipProvider } from "@radix-ui/react-tooltip";
import { ThemeProvider } from "next-themes";
import { Toaster } from "@/components/ui/sonner";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body className={inter.className}>
          <SignedOut>
            {/* Display SignInButton when the user is signed out */}
            <SignInButton />
          </SignedOut>
          <SignedIn>
            {/* Display UserButton when the user is signed in */}
            
          </SignedIn>
          {/* Wrap children with ConvexClientProvider */}
          <ThemeProvider attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange>
          <ConvexClientProvider>
            <TooltipProvider> {children}</TooltipProvider>
            <Toaster richColors/>
          </ConvexClientProvider>
          </ThemeProvider>
          
        </body>
      </html>
    </ClerkProvider>
  );
}